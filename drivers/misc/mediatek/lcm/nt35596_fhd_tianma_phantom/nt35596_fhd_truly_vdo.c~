#ifndef BUILD_LK
#include <linux/string.h>
#endif
#include "lcm_drv.h"
#include "tps65132_iic.h"

#ifdef BUILD_LK
#include <platform/mt_gpio.h>
#include <platform/mt_i2c.h>
#include <platform/mt_pmic.h>
#elif defined(BUILD_UBOOT)
#include <asm/arch/mt_gpio.h>
#else
#include <mach/mt_gpio.h>
#endif

#include <cust_gpio_usage.h>
#include <cust_i2c.h>
#define LCM_DSI_CMD_MODE					0
#define FRAME_WIDTH  						(1080)
#define FRAME_HEIGHT 						(1920)
#define GPIO_65132_EN						GPIO_LCD_BIAS_ENP_PIN

#define REGFLAG_PORT_SWAP 0xFFFA
#define REGFLAG_DELAY 0xFFFC
#define REGFLAG_END_OF_TABLE 0xFFFD 

#ifndef TRUE
#define TRUE (1)
#endif

#ifndef FALSE
#define FALSE (0)
#endif

static LCM_UTIL_FUNCS lcm_util;

#define SET_RESET_PIN(v) (lcm_util.set_reset_pin((v)))
#define MDELAY(n) (lcm_util.mdelay(n))

#define dsi_set_cmd_by_cmdq_dual(handle,cmd,count,ppara,force_update) lcm_util.dsi_set_cmdq_V23(handle,cmd,count,ppara,force_update)
#define dsi_set_cmdq_V2(cmd, count, ppara, force_update) lcm_util.dsi_set_cmdq_V2(cmd, count, ppara, force_update)
#define dsi_set_cmdq(pdata, queue_size, force_update) lcm_util.dsi_set_cmdq(pdata, queue_size, force_update)
#define wrtie_cmd(cmd) lcm_util.dsi_write_cmd(cmd)
#define write_regs(addr, pdata, byte_nums) lcm_util.dsi_write_regs(addr, pdata, byte_nums)
#define read_reg(cmd) lcm_util.dsi_dcs_read_lcm_reg(cmd)
#define read_reg_v2(cmd, buffer, buffer_size) lcm_util.dsi_dcs_read_lcm_reg_v2(cmd, buffer, buffer_size)
#define dsi_swap_port(swap) lcm_util.dsi_swap_port(swap)

struct LCM_setting_table {
	unsigned int cmd;
	unsigned char count;
	unsigned char para_list[64];
};

static struct LCM_setting_table lcm_initialization_setting[] =
{
	
	{0xFF, 1, {0xEE}},
	{0xFB, 1, {0x01}},
	{0x18, 1, {0x40}},
	{REGFLAG_DELAY, 10, {}},
	{0x18, 1, {0x00}},
	{REGFLAG_DELAY, 20, {}},
	
	{0xFC, 1, {0x00}},
	
	{0x7C, 1, {0x31}},
	
	{0xFF, 1, {0x05}},
	
	{0xFB, 1, {0x01}},
	{0xE7, 1, {0x00}},
	{0xFF, 1, {0x04}},
	{0xFB, 1, {0x01}},
	{0x08, 1, {0x06}},
	{0xFF, 1, {0x00}},
	{0xFB, 1, {0x01}},
	{0xD3, 1, {0x06}},//offset 276744
	{0xD4, 1, {0x04}},
	{0x11, 0, {0x00}},
	{0x0E, 1, {0xB0}},
	{0x0F, 1, {0xB3}},
	{0x14, 1, {0x4A}},
	{0x15, 1, {0x12}},
	{0x16, 1, {0x12}},
	{0x18, 1, {0x00}},
	{0x19, 1, {0x77}},
	{0x1A, 1, {0x55}},
	{0x1B, 1, {0x13}},
	{0x1C, 1, {0x00}},
	{0x1D, 1, {0x00}},
	{0x1E, 1, {0x00}},
	{0x1F, 1, {0x00}},
	
	{0x58, 1, {0x82}},
	{0x59, 1, {0x02}},
	{0x5A, 1, {0x02}},
	{0x5B, 1, {0x02}},
	{0x5C, 1, {0x82}},
	{0x5D, 1, {0x82}},
	{0x5E, 1, {0x02}},
	{0x5F, 1, {0x02}},
	
	{0x72, 1, {0x31}},
	
	{0xFB, 1, {0x01}},

	
	{0xFF, 1, {0x05}},
	{0x00, 1, {0x01}},
	{0x01, 1, {0x0B}},
	{0x02, 1, {0x0C}},
	{0x03, 1, {0x09}},
	{0x04, 1, {0x0A}},
	{0x05, 1, {0x00}},
	{0x06, 1, {0x0F}},
	{0x07, 1, {0x10}},
	{0x08, 1, {0x1A}},
	{0x09, 1, {0x00}},
	{0x0A, 1, {0x00}},
	{0x0B, 1, {0x00}},
	{0x0C, 1, {0x00}},
	{0x0D, 1, {0x13}},
	{0x0E, 1, {0x15}},
	{0x0F, 1, {0x17}},
	{0x10, 1, {0x01}},
	{0x11, 1, {0x0B}},
	{0x12, 1, {0x0C}},
	{0x13, 1, {0x09}},
	{0x14, 1, {0x0A}},
	{0x15, 1, {0x00}},
	{0x16, 1, {0x0F}},
	{0x17, 1, {0x10}},
	{0x18, 1, {0x1A}},
	{0x19, 1, {0x00}},
	{0x1A, 1, {0x00}},
	{0x1B, 1, {0x00}},
	{0x1C, 1, {0x00}},
	{0x1D, 1, {0x13}},
	{0x1E, 1, {0x15}},
	{0x1F, 1, {0x17}},

	
	{0x20, 1, {0x00}},
	{0x21, 1, {0x01}},
	{0x22, 1, {0x00}},
	{0x23, 1, {0x40}},
	{0x24, 1, {0x40}},
	{0x25, 1, {0x6D}},

	
	{0x29, 1, {0xD8}},
	{0x2A, 1, {0x2A}},
	{0x2B, 1, {0x00}},
	
	{0xB6, 1, {0x89}},
	{0xB7, 1, {0x14}},
	{0xB8, 1, {0x05}},
	
	{0x4B, 1, {0x04}},
	{0x4C, 1, {0x11}},
	{0x4D, 1, {0x10}},
	{0x4E, 1, {0x01}},
	{0x4F, 1, {0x01}},
	{0x50, 1, {0x10}},
	{0x51, 1, {0x00}},
	{0x52, 1, {0x00}},
	{0x53, 1, {0x08}},
	{0x54, 1, {0x01}},
	{0x55, 1, {0x6D}},
	
	{0x5B, 1, {0x44}},
	{0x5C, 1, {0x00}},
	{0x5F, 1, {0x74}},
	{0x60, 1, {0x75}},
	{0x63, 1, {0xFF}},
	{0x64, 1, {0x00}},
	{0x67, 1, {0x04}},
	{0x68, 1, {0x04}},
	{0x6C, 1, {0x00}},
	
	{0x7A, 1, {0x80}},
	{0x7B, 1, {0x91}},
	{0x7C, 1, {0xD8}},
	{0x7D, 1, {0x60}},
	{0x7F, 1, {0x15}},
	
	{0x80, 1, {0x00}},
	{0x83, 1, {0x00}},
	
	{0x93, 1, {0x08}},
	{0x94, 1, {0x0A}},
	
	{0x8A, 1, {0x00}},
	{0x9B, 1, {0x0F}},
        
	{0xFB, 1, {0x01}},

	
	{0xFF, 1, {0x01}},
	{0xFB, 1, {0x01}},
	{0x75, 1, {0x00}},
	{0x76, 1, {0x00}},
	{0x77, 1, {0x00}},
	{0x78, 1, {0x54}},
	{0x79, 1, {0x00}},
	{0x7A, 1, {0x7E}},
	{0x7B, 1, {0x00}},
	{0x7C, 1, {0x9A}},
	{0x7D, 1, {0x00}},
	{0x7E, 1, {0xB0}},
	{0x7F, 1, {0x00}},
	{0x80, 1, {0xC1}},
	{0x81, 1, {0x00}},
	{0x82, 1, {0xD1}},
	{0x83, 1, {0x00}},
	{0x84, 1, {0xDF}},
	{0x85, 1, {0x00}},
	{0x86, 1, {0xEC}},
	{0x87, 1, {0x01}},
	{0x88, 1, {0x17}},
	{0x89, 1, {0x01}},
	{0x8A, 1, {0x39}},
	{0x8B, 1, {0x01}},
	{0x8C, 1, {0x6E}},
	{0x8D, 1, {0x01}},
	{0x8E, 1, {0x99}},
	{0x8F, 1, {0x01}},
	{0x90, 1, {0xDD}},
	{0x91, 1, {0x02}},
	{0x92, 1, {0x14}},
	{0x93, 1, {0x02}},
	{0x94, 1, {0x15}},
	{0x95, 1, {0x02}},
	{0x96, 1, {0x48}},
	{0x97, 1, {0x02}},
	{0x98, 1, {0x7F}},
	{0x99, 1, {0x02}},
	{0x9A, 1, {0xA2}},
	{0x9B, 1, {0x02}},
	{0x9C, 1, {0xD2}},
	{0x9D, 1, {0x02}},
	{0x9E, 1, {0xF3}},
	{0x9F, 1, {0x03}},
	{0xA0, 1, {0x20}},
	{0xA2, 1, {0x03}},
	{0xA3, 1, {0x2F}},
	{0xA4, 1, {0x03}},
	{0xA5, 1, {0x3F}},
	{0xA6, 1, {0x03}},
	{0xA7, 1, {0x52}},
	{0xA9, 1, {0x03}},
	{0xAA, 1, {0x68}},
	{0xAB, 1, {0x03}},
	{0xAC, 1, {0x82}},
	{0xAD, 1, {0x03}},
	{0xAE, 1, {0xA5}},
	{0xAF, 1, {0x03}},
	{0xB0, 1, {0xD9}},
	{0xB1, 1, {0x03}},
	{0xB2, 1, {0xFF}},
	{0xB3, 1, {0x00}},
	{0xB4, 1, {0x00}},
	{0xB5, 1, {0x00}},
	{0xB6, 1, {0x54}},
	{0xB7, 1, {0x00}},
	{0xB8, 1, {0x7E}},
	{0xB9, 1, {0x00}},
	{0xBA, 1, {0x9A}},
	{0xBB, 1, {0x00}},
	{0xBC, 1, {0xB0}},
	{0xBD, 1, {0x00}},
	{0xBE, 1, {0xC1}},
	{0xBF, 1, {0x00}},
	{0xC0, 1, {0xD1}},
	{0xC1, 1, {0x00}},
	{0xC2, 1, {0xDF}},
	{0xC3, 1, {0x00}},
	{0xC4, 1, {0xEC}},
	{0xC5, 1, {0x01}},
	{0xC6, 1, {0x17}},
	{0xC7, 1, {0x01}},
	{0xC8, 1, {0x39}},
	{0xC9, 1, {0x01}},
	{0xCA, 1, {0x6E}},
	{0xCB, 1, {0x01}},
	{0xCC, 1, {0x99}},
	{0xCD, 1, {0x01}},
	{0xCE, 1, {0xDD}},
	{0xCF, 1, {0x02}},
	{0xD0, 1, {0x14}},
	{0xD1, 1, {0x02}},
	{0xD2, 1, {0x15}},
	{0xD3, 1, {0x02}},
	{0xD4, 1, {0x48}},
	{0xD5, 1, {0x02}},
	{0xD6, 1, {0x7F}},
	{0xD7, 1, {0x02}},
	{0xD8, 1, {0xA2}},
	{0xD9, 1, {0x02}},
	{0xDA, 1, {0xD2}},
	{0xDB, 1, {0x02}},
	{0xDC, 1, {0xF3}},
	{0xDD, 1, {0x03}},
	{0xDE, 1, {0x20}},
	{0xDF, 1, {0x03}},
	{0xE0, 1, {0x2F}},
	{0xE1, 1, {0x03}},
	{0xE2, 1, {0x3F}},
	{0xE3, 1, {0x03}},
	{0xE4, 1, {0x52}},
	{0xE5, 1, {0x03}},
	{0xE6, 1, {0x68}},
	{0xE7, 1, {0x03}},
	{0xE8, 1, {0x82}},
	{0xE9, 1, {0x03}},
	{0xEA, 1, {0xA5}},
	{0xEB, 1, {0x03}},
	{0xEC, 1, {0xD9}},
	{0xED, 1, {0x03}},
	{0xEE, 1, {0xFF}},
	{0xEF, 1, {0x00}},
	{0xF0, 1, {0x00}},
	{0xF1, 1, {0x00}},
	{0xF2, 1, {0x54}},
	{0xF3, 1, {0x00}},
	{0xF4, 1, {0x7E}},
	{0xF5, 1, {0x00}},
	{0xF6, 1, {0x9A}},
	{0xF7, 1, {0x00}},
	{0xF8, 1, {0xB0}},
	{0xF9, 1, {0x00}},
	{0xFA, 1, {0xC1}},
	{0xFF, 1, {0x02}},
	{0xFB, 1, {0x01}},
	{0x00, 1, {0x00}},
	{0x01, 1, {0xD1}},
	{0x02, 1, {0x00}},
	{0x03, 1, {0xDF}},
	{0x04, 1, {0x00}},
	{0x05, 1, {0xEC}},
	{0x06, 1, {0x01}},
	{0x07, 1, {0x17}},
	{0x08, 1, {0x01}},
	{0x09, 1, {0x39}},
	{0x0A, 1, {0x01}},
	{0x0B, 1, {0x6E}},
	{0x0C, 1, {0x01}},
	{0x0D, 1, {0x99}},
	{0x0E, 1, {0x01}},
	{0x0F, 1, {0xDD}},
	{0x10, 1, {0x02}},
	{0x11, 1, {0x14}},
	{0x12, 1, {0x02}},
	{0x13, 1, {0x15}},
	{0x14, 1, {0x02}},
	{0x15, 1, {0x48}},
	{0x16, 1, {0x02}},
	{0x17, 1, {0x7F}},
	{0x18, 1, {0x02}},
	{0x19, 1, {0xA2}},
	{0x1A, 1, {0x02}},
	{0x1B, 1, {0xD2}},
	{0x1C, 1, {0x02}},
	{0x1D, 1, {0xF3}},
	{0x1E, 1, {0x03}},
	{0x1F, 1, {0x20}},
	{0x20, 1, {0x03}},
	{0x21, 1, {0x2F}},
	{0x22, 1, {0x03}},
	{0x23, 1, {0x3F}},
	{0x24, 1, {0x03}},
	{0x25, 1, {0x52}},
	{0x26, 1, {0x03}},
	{0x27, 1, {0x68}},
	{0x28, 1, {0x03}},
	{0x29, 1, {0x82}},
	{0x2A, 1, {0x03}},
	{0x2B, 1, {0xA5}},
	{0x2D, 1, {0x03}},
	{0x2F, 1, {0xD9}},
	{0x30, 1, {0x03}},
	{0x31, 1, {0xFF}},
	{0x32, 1, {0x00}},
	{0x33, 1, {0x00}},
	{0x34, 1, {0x00}},
	{0x35, 1, {0x54}},
	{0x36, 1, {0x00}},
	{0x37, 1, {0x7E}},
	{0x38, 1, {0x00}},
	{0x39, 1, {0x9A}},
	{0x3A, 1, {0x00}},
	{0x3B, 1, {0xB0}},
	{0x3D, 1, {0x00}},
	{0x3F, 1, {0xC1}},
	{0x40, 1, {0x00}},
	{0x41, 1, {0xD1}},
	{0x42, 1, {0x00}},
	{0x43, 1, {0xDF}},
	{0x44, 1, {0x00}},
	{0x45, 1, {0xEC}},
	{0x46, 1, {0x01}},
	{0x47, 1, {0x17}},
	{0x48, 1, {0x01}},
	{0x49, 1, {0x39}},
	{0x4A, 1, {0x01}},
	{0x4B, 1, {0x6E}},
	{0x4C, 1, {0x01}},
	{0x4D, 1, {0x99}},
	{0x4E, 1, {0x01}},
	{0x4F, 1, {0xDD}},
	{0x50, 1, {0x02}},
	{0x51, 1, {0x14}},
	{0x52, 1, {0x02}},
	{0x53, 1, {0x15}},
	{0x54, 1, {0x02}},
	{0x55, 1, {0x48}},
	{0x56, 1, {0x02}},
	{0x58, 1, {0x7F}},
	{0x59, 1, {0x02}},
	{0x5A, 1, {0xA2}},
	{0x5B, 1, {0x02}},
	{0x5C, 1, {0xD2}},
	{0x5D, 1, {0x02}},
	{0x5E, 1, {0xF3}},
	{0x5F, 1, {0x03}},
	{0x60, 1, {0x20}},
	{0x61, 1, {0x03}},
	{0x62, 1, {0x2F}},
	{0x63, 1, {0x03}},
	{0x64, 1, {0x3F}},
	{0x65, 1, {0x03}},
	{0x66, 1, {0x52}},
	{0x67, 1, {0x03}},
	{0x68, 1, {0x68}},
	{0x69, 1, {0x03}},
	{0x6A, 1, {0x82}},
	{0x6B, 1, {0x03}},
	{0x6C, 1, {0xA5}},
	{0x6D, 1, {0x03}},
	{0x6E, 1, {0xD9}},
	{0x6F, 1, {0x03}},
	{0x70, 1, {0xFF}},
	{0x71, 1, {0x00}},
	{0x72, 1, {0x00}},
	{0x73, 1, {0x00}},
	{0x74, 1, {0x54}},
	{0x75, 1, {0x00}},
	{0x76, 1, {0x7E}},
	{0x77, 1, {0x00}},
	{0x78, 1, {0x9A}},
	{0x79, 1, {0x00}},
	{0x7A, 1, {0xB0}},
	{0x7B, 1, {0x00}},
	{0x7C, 1, {0xC1}},
	{0x7D, 1, {0x00}},
	{0x7E, 1, {0xD1}},
	{0x7F, 1, {0x00}},
	{0x80, 1, {0xDF}},
	{0x81, 1, {0x00}},
	{0x82, 1, {0xEC}},
	{0x83, 1, {0x01}},
	{0x84, 1, {0x17}},
	{0x85, 1, {0x01}},
	{0x86, 1, {0x39}},
	{0x87, 1, {0x01}},
	{0x88, 1, {0x6E}},
	{0x89, 1, {0x01}},
	{0x8A, 1, {0x99}},
	{0x8B, 1, {0x01}},
	{0x8C, 1, {0xDD}},
	{0x8D, 1, {0x02}},
	{0x8E, 1, {0x14}},
	{0x8F, 1, {0x02}},
	{0x90, 1, {0x15}},
	{0x91, 1, {0x02}},
	{0x92, 1, {0x48}},
	{0x93, 1, {0x02}},
	{0x94, 1, {0x7F}},
	{0x95, 1, {0x02}},
	{0x96, 1, {0xA2}},
	{0x97, 1, {0x02}},
	{0x98, 1, {0xD2}},
	{0x99, 1, {0x02}},
	{0x9A, 1, {0xF3}},
	{0x9B, 1, {0x03}},
	{0x9C, 1, {0x20}},
	{0x9D, 1, {0x03}},
	{0x9E, 1, {0x2F}},
	{0x9F, 1, {0x03}},
	{0xA0, 1, {0x3F}},
	{0xA2, 1, {0x03}},
	{0xA3, 1, {0x52}},
	{0xA4, 1, {0x03}},
	{0xA5, 1, {0x68}},
	{0xA6, 1, {0x03}},
	{0xA7, 1, {0x82}},
	{0xA9, 1, {0x03}},
	{0xAA, 1, {0xA5}},
	{0xAB, 1, {0x03}},
	{0xAC, 1, {0xD9}},
	{0xAD, 1, {0x03}},
	{0xAE, 1, {0xFF}},
	{0xAF, 1, {0x00}},
	{0xB0, 1, {0x00}},
	{0xB1, 1, {0x00}},
	{0xB2, 1, {0x54}},
	{0xB3, 1, {0x00}},
	{0xB4, 1, {0x7E}},
	{0xB5, 1, {0x00}},
	{0xB6, 1, {0x9A}},
	{0xB7, 1, {0x00}},
	{0xB8, 1, {0xB0}},
	{0xB9, 1, {0x00}},
	{0xBA, 1, {0xC1}},
	{0xBB, 1, {0x00}},
	{0xBC, 1, {0xD1}},
	{0xBD, 1, {0x00}},
	{0xBE, 1, {0xDF}},
	{0xBF, 1, {0x00}},
	{0xC0, 1, {0xEC}},
	{0xC1, 1, {0x01}},
	{0xC2, 1, {0x17}},
	{0xC3, 1, {0x01}},
	{0xC4, 1, {0x39}},
	{0xC5, 1, {0x01}},
	{0xC6, 1, {0x6E}},
	{0xC7, 1, {0x01}},
	{0xC8, 1, {0x99}},
	{0xC9, 1, {0x01}},
	{0xCA, 1, {0xDD}},
	{0xCB, 1, {0x02}},
	{0xCC, 1, {0x14}},
	{0xCD, 1, {0x02}},
	{0xCE, 1, {0x15}},
	{0xCF, 1, {0x02}},
	{0xD0, 1, {0x48}},
	{0xD1, 1, {0x02}},
	{0xD2, 1, {0x7F}},
	{0xD3, 1, {0x02}},
	{0xD4, 1, {0xA2}},
	{0xD5, 1, {0x02}},
	{0xD6, 1, {0xD2}},
	{0xD7, 1, {0x02}},
	{0xD8, 1, {0xF3}},
	{0xD9, 1, {0x03}},
	{0xDA, 1, {0x20}},
	{0xDB, 1, {0x03}},
	{0xDC, 1, {0x2F}},
	{0xDD, 1, {0x03}},
	{0xDE, 1, {0x3F}},
	{0xDF, 1, {0x03}},
	{0xE0, 1, {0x52}},
	{0xE1, 1, {0x03}},
	{0xE2, 1, {0x68}},
	{0xE3, 1, {0x03}},
	{0xE4, 1, {0x82}},
	{0xE5, 1, {0x03}},
	{0xE6, 1, {0xA5}},
	{0xE7, 1, {0x03}},
	{0xE8, 1, {0xD9}},
	{0xE9, 1, {0x03}},
	{0xEA, 1, {0xFF}},

        
	{0xFF, 1, {0x05}},
	{0xE7, 1, {0x80}},
	{0xFB, 1, {0x01}},
	
	{0xEC, 1, {0x00}},
	
	{0xFF,1,{0x03 }},
	{0x00,1,{0x00 }},
	{0x01,1,{0x04 }},
	{0x02,1,{0x08 }},
	{0x03,1,{0x01 }},
	{0x04,1,{0x10 }},
	{0x05,1,{0x14 }},
	{0x06,1,{0x18 }},
	{0x07,1,{0x20 }},
	{0x08,1,{0x24 }},
	{0x09,1,{0x28 }},
	{0x0A,1,{0x30 }},
	{0x0B,1,{0x38 }},
	{0x0C,1,{0x38 }},
	{0x0D,1,{0x30 }},
	{0x0E,1,{0x28 }},
	{0x0F,1,{0x20 }},
	{0x10,1,{0x10 }},
	{0x11,1,{0x00 }},
	{0x12,1,{0x00 }},
	{0x13,1,{0x00 }},
	{0x58,1,{0x59 }},
	{0x1A,1,{0x00 }},
	{0x53,1,{0x77 }},
	{0xFB,1,{0x01 }},

	
	{0xFF,1,{0x04}},
	{0x00,1,{0x00}},
	{0x01,1,{0x80}},
	{0x02,1,{0x11}},
	{0x05,1,{0x25}},
	{0x06,1,{0x01}},
	{0x08,1,{0x04}},
	{0x17,1,{0xFF}},
	{0x18,1,{0xF0}},
	{0x19,1,{0xEE}},
	{0x1A,1,{0xE5}},
	{0x1B,1,{0xE0}},
	{0x1C,1,{0xDF}},
	{0x1D,1,{0xDA}},
	{0x1E,1,{0xF1}},
	{0x1F,1,{0xFF}},
	{0x20,1,{0xB3}},
	{0xFB,1,{0x01}},

	
	{0xFF, 1, {0x00}},
	{0xD3, 1, {0x06}},
	{0xD4, 1, {0x04}},
	{0x35, 1, {0x00}},
	{0x53, 1, {0x24}},
	{0x55, 1, {0x82}},
	{0x11, 0, {}},
	{REGFLAG_DELAY, 140, {}},
	{0x29, 0, {}},
	{REGFLAG_END_OF_TABLE, 0x00, {}},
};

static struct LCM_setting_table lcm_suspend_setting[] = {
	{0x28,0,{}},
	{REGFLAG_DELAY, 24, {}},
	{0x34, 1, {0x00}},
	{0x10,0,{}},
	{REGFLAG_DELAY, 80, {}},

	
	{0x53, 1, {0x00}},
	{0x55, 1, {0x00}},
	{REGFLAG_END_OF_TABLE, 0x00, {}}
};

static void push_table(struct LCM_setting_table *table, unsigned int count, unsigned char force_update)
{
	unsigned int i;

	for(i = 0; i < count; i++)
	{
		unsigned cmd;
		cmd = table[i].cmd;

		switch (cmd) {
		case REGFLAG_DELAY :
			if(table[i].count <= 10)
				MDELAY(table[i].count);
			else
				MDELAY(table[i].count);
			break;

		case REGFLAG_END_OF_TABLE :
			break;

		case REGFLAG_PORT_SWAP:
			dsi_swap_port(1);
			break;
		default:
			dsi_set_cmdq_V2(cmd, table[i].count, table[i].para_list, force_update);
		}
	}
}

static void lcm_set_util_funcs(const LCM_UTIL_FUNCS *util)
{
	memcpy(&lcm_util, util, sizeof(LCM_UTIL_FUNCS));
}

static void lcm_get_params(LCM_PARAMS *params)
{
	memset(params, 0, sizeof(LCM_PARAMS));

	params->type = LCM_TYPE_DSI;
	params->width = FRAME_WIDTH;
	params->height = FRAME_HEIGHT;
#if defined(CONFIG_CUSTOM_KERNEL_LCM_PHY_WIDTH) && defined(CONFIG_CUSTOM_KERNEL_LCM_PHY_HEIGHT)
	params->physical_width = CONFIG_CUSTOM_KERNEL_LCM_PHY_WIDTH;
	params->physical_height = CONFIG_CUSTOM_KERNEL_LCM_PHY_HEIGHT;
#endif

#if (LCM_DSI_CMD_MODE)
	params->dsi.mode = CMD_MODE;
#else
	params->dsi.mode = BURST_VDO_MODE;
#endif
	
	params->dsi.LANE_NUM = LCM_FOUR_LANE;
	
	params->dsi.data_format.color_order = LCM_COLOR_ORDER_RGB;
	params->dsi.data_format.trans_seq = LCM_DSI_TRANS_SEQ_MSB_FIRST;
	params->dsi.data_format.padding = LCM_DSI_PADDING_ON_LSB;
	params->dsi.data_format.format = LCM_DSI_FORMAT_RGB888;

	
	params->dsi.packet_size = 256;
	params->dsi.ssc_disable = 1;
	params->dsi.ssc_range = 4;

	
	params->dsi.PS=LCM_PACKED_PS_24BIT_RGB888;
	params->dsi.vertical_sync_active = 2;
	params->dsi.vertical_backporch = 4;
	params->dsi.vertical_frontporch = 34;
	params->dsi.vertical_active_line = FRAME_HEIGHT;

	params->dsi.horizontal_sync_active = 20;
	params->dsi.horizontal_backporch = 40;
	params->dsi.horizontal_frontporch = 80;
	params->dsi.horizontal_active_pixel = FRAME_WIDTH;

	params->dsi.PLL_CLOCK = 460; 

	params->dsi.esd_check_enable = 0;
	params->dsi.customization_esd_check_enable = 0;
	params->dsi.lcm_esd_check_table[2].cmd = 0xb0;
	params->dsi.lcm_esd_check_table[2].count = 1;
	params->dsi.lcm_esd_check_table[2].para_list[0] = 0x04;
	params->dsi.lcm_esd_check_table[1].cmd = 0x36;
	params->dsi.lcm_esd_check_table[1].count = 1;
	params->dsi.lcm_esd_check_table[1].para_list[0] = 0x40;
	params->dsi.lcm_esd_check_table[0].cmd = 0xd6;
	params->dsi.lcm_esd_check_table[0].count = 1;
	params->dsi.lcm_esd_check_table[0].para_list[0] = 0x01;
	params->dsi.clk_lp_per_line_enable = 0;

	
	params->dsi.lane_swap_en = 0;
	params->dsi.lane_swap[MIPITX_PHY_PORT_1][MIPITX_PHY_LANE_0] = MIPITX_PHY_LANE_2;
	params->dsi.lane_swap[MIPITX_PHY_PORT_1][MIPITX_PHY_LANE_1] = MIPITX_PHY_LANE_CK;
	params->dsi.lane_swap[MIPITX_PHY_PORT_1][MIPITX_PHY_LANE_2] = MIPITX_PHY_LANE_0;
	params->dsi.lane_swap[MIPITX_PHY_PORT_1][MIPITX_PHY_LANE_3] = MIPITX_PHY_LANE_1;
	params->dsi.lane_swap[MIPITX_PHY_PORT_1][MIPITX_PHY_LANE_CK] = MIPITX_PHY_LANE_3;
	params->dsi.lane_swap[MIPITX_PHY_PORT_1][MIPITX_PHY_LANE_RX] = MIPITX_PHY_LANE_2;

	params->dsi.lane_swap[MIPITX_PHY_PORT_0][MIPITX_PHY_LANE_0] = MIPITX_PHY_LANE_0;
	params->dsi.lane_swap[MIPITX_PHY_PORT_0][MIPITX_PHY_LANE_1] = MIPITX_PHY_LANE_3;
	params->dsi.lane_swap[MIPITX_PHY_PORT_0][MIPITX_PHY_LANE_2] = MIPITX_PHY_LANE_2;
	params->dsi.lane_swap[MIPITX_PHY_PORT_0][MIPITX_PHY_LANE_3] = MIPITX_PHY_LANE_1;
	params->dsi.lane_swap[MIPITX_PHY_PORT_0][MIPITX_PHY_LANE_CK] = MIPITX_PHY_LANE_CK;
	params->dsi.lane_swap[MIPITX_PHY_PORT_0][MIPITX_PHY_LANE_RX] = MIPITX_PHY_LANE_0;

	params->pwm_min = 6;
	params->pwm_default = 76;
	params->pwm_max = 255;
	params->camera_blk = 193;
	params->camera_dua_blk = 193;
	params->dim_cmd = 0x2c;
}

static void lcm_power_on(void) {
	unsigned char cmd = 0x0;
	unsigned char data = 0xFF;

	LCD_LOG("[DISP] %s: \n", __FUNCTION__);

	
        mt_set_gpio_mode(GPIO_LCM_RST, GPIO_MODE_01);
	SET_RESET_PIN(0);

#ifdef BUILD_LK
	mt6331_upmu_set_rg_vgp1_en(1);
	mt6331_upmu_set_rg_vcam_io_en(1);
#endif
	
	mt_set_gpio_mode(GPIO_LCD_BIAS_ENP_PIN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_BIAS_ENP_PIN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_BIAS_ENP_PIN, GPIO_OUT_ONE);
	MDELAY(1);
	
	cmd = 0x00;
	data = 0x0f;
	tps65132_write_bytes(cmd, data);
	MDELAY(10);

	
	mt_set_gpio_mode(GPIO_LCD_BIAS_ENN_PIN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_BIAS_ENN_PIN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_BIAS_ENN_PIN, GPIO_OUT_ONE);
	MDELAY(1);
	
	tps65132_write_bytes(0x3, 0x43);
	
	cmd = 0x01;
	data = 0x0f;
	tps65132_write_bytes(cmd, data);
	MDELAY(40);

	SET_RESET_PIN(1);
	MDELAY(10);

	SET_RESET_PIN(0);
	MDELAY(10);

	SET_RESET_PIN(1);
	MDELAY(10);

	SET_RESET_PIN(0);
	MDELAY(10);

	SET_RESET_PIN(1);
	MDELAY(20);
}

static void lcm_power_off(void) {

	LCD_LOG("[DISP] %s: \n", __FUNCTION__);

	SET_RESET_PIN(1);
	MDELAY(10);

	SET_RESET_PIN(0);
	MDELAY(70);

	
	mt_set_gpio_mode(GPIO_LCD_BIAS_ENN_PIN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_BIAS_ENN_PIN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_BIAS_ENN_PIN, GPIO_OUT_ZERO);
	MDELAY(10);

	
	mt_set_gpio_mode(GPIO_LCD_BIAS_ENP_PIN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_BIAS_ENP_PIN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_BIAS_ENP_PIN, GPIO_OUT_ZERO);
	MDELAY(10);

	
	mt_set_gpio_mode((GPIO62 | 0x80000000), GPIO_MODE_00);
	mt_set_gpio_dir((GPIO62 | 0x80000000), GPIO_DIR_OUT);
	mt_set_gpio_out((GPIO62 | 0x80000000), GPIO_OUT_ZERO);
}

static void lcm_init_power(void)
{
	lcm_power_on();
}

static void lcm_resume_power(void)
{
	lcm_power_on();
}

static void lcm_suspend_power(void)
{
	lcm_power_off();
}

static void lcm_init(void)
{
	LCD_LOG("[DISP] %s: \n", __FUNCTION__);
	
	push_table(lcm_initialization_setting, sizeof(lcm_initialization_setting) / sizeof(struct LCM_setting_table), 1);
}

static void lcm_suspend(void)
{
	LCD_LOG("[DISP] %s: \n", __FUNCTION__);
	push_table(lcm_suspend_setting, sizeof(lcm_suspend_setting) / sizeof(struct LCM_setting_table), 1);
}

static void lcm_resume(void)
{
	LCD_LOG("[DISP] %s: \n", __FUNCTION__);
	lcm_init();
}

static void lcm_update(unsigned int x, unsigned int y,
			unsigned int width, unsigned int height)
{
	unsigned int x0 = x;
	unsigned int y0 = y;
	unsigned int x1 = x0 + width - 1;
	unsigned int y1 = y0 + height - 1;

	unsigned char x0_MSB = ((x0>>8)&0xFF);
	unsigned char x0_LSB = (x0&0xFF);
	unsigned char x1_MSB = ((x1>>8)&0xFF);
	unsigned char x1_LSB = (x1&0xFF);
	unsigned char y0_MSB = ((y0>>8)&0xFF);
	unsigned char y0_LSB = (y0&0xFF);
	unsigned char y1_MSB = ((y1>>8)&0xFF);
	unsigned char y1_LSB = (y1&0xFF);

	unsigned int data_array[16];

	data_array[0]= 0x00053902;
	data_array[1]= (x1_MSB<<24)|(x0_LSB<<16)|(x0_MSB<<8)|0x2a;
	data_array[2]= (x1_LSB);
	dsi_set_cmdq(data_array, 3, 1);

	data_array[0]= 0x00053902;
	data_array[1]= (y1_MSB<<24)|(y0_LSB<<16)|(y0_MSB<<8)|0x2b;
	data_array[2]= (y1_LSB);
	dsi_set_cmdq(data_array, 3, 1);

	data_array[0]= 0x002c3909;
	dsi_set_cmdq(data_array, 1, 0);
}

static unsigned int lcm_compare_id(void)
{
	return 1;
}

static unsigned int lcm_check_id(void)
{
	unsigned char tmp = which_lcd_module_triple();
	unsigned int retval = (tmp == 10) ? 1 : 0;
	
	
	
	return retval;
}

static void lcm_setbacklight_cmdq(void* handle,unsigned int level)
{
	LCD_LOG("%s, R63423 backlight: level = %d\n", __func__, level);
	

	unsigned int cmd = 0x51;
	unsigned int count =1;
	unsigned int value = level;
	dsi_set_cmd_by_cmdq_dual(handle, cmd, count, &value, 1);
}

static void lcm_set_lcm_cmd(void* handle,unsigned int *lcm_cmd,unsigned int *lcm_count,unsigned int *lcm_value)
{
	LCD_LOG("%s, lcm cmd: \n", __func__);

	unsigned int cmd = lcm_cmd[0];
	unsigned int count = lcm_count[0];
	unsigned int *ppara = lcm_value;
	dsi_set_cmd_by_cmdq_dual(handle, cmd, count, ppara, 1);
}

LCM_DRIVER nt35596_fhd_tianma_phantom_lcm_drv =
{
	.name		= "nt35596_fhd_tianma_phantom",
	.set_util_funcs	= lcm_set_util_funcs,
	.get_params	= lcm_get_params,
	.init		= lcm_init,
	.suspend	= lcm_suspend,
	.resume		= lcm_resume,
	.compare_id	= lcm_compare_id,
	.check_id	= lcm_check_id,
	.init_power	= lcm_init_power,
	.resume_power	= lcm_resume_power,
	.suspend_power	= lcm_suspend_power,
	.set_backlight_cmdq  = lcm_setbacklight_cmdq,
	.set_lcm_cmd    = lcm_set_lcm_cmd,
#if (LCM_DSI_CMD_MODE)
	.update		= lcm_update,
#endif
};
